    
// Java escapes

//Sets the object that should be selected after the transformation is executed
Void setSelection(Object object):
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.setPostTransformationSelection(java.lang.Object)
;

//Get the file name of the file loaded in the currently active editor
String getFileNameOfActiveEditor():
 JAVA de.cau.cs.kieler.ksbase.ui.utils.TransformationUtils.getFileNameOfActiveEditor()
;

// copy an object or a list of objects to clipboard
Object copyObjectToClipboard(Object object):
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.objectToClipboard(java.lang.Object)
 null
;

// get an object or a list of objects from clipboard
Object getObjectFromClipboard():
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.getObjectFromClipboard()
 null
;

Boolean isClipboardEmpty():
 //JAVA de.cau.cs.kieler.synccharts.diagram.custom.commands.Utils.isClipboardEmpty()
 true
;
// Entry point for copy
Void copy(Object obj):
 copyInternal(obj)
;

// dummy for matching
Void copyInternal(Object obj):
 null
;

// Entry point for list copy since Xtend can't match over list type.
Void copyInternal(List[Object] list):
let EntityList = list.select(e|e.metaType == Entity):
let RelationList = list.select(e|e.metaType == Relation):
let LinkList = list.select(e|e.metaType == Link):
let PortList = list.select(e|e.metaType == Port):
(if (!EntityList.isEmpty) then (copyInternalEntityList(EntityList)) else (
(if (!RelationList.isEmpty) then (copyInternalRelationList(RelationList)) else (
(if (!LinkList.isEmpty) then (copyInternalLinkList(LinkList)) else (
(if (!PortList.isEmpty) then (copyInternalPortList(PortList)) else (
null
))
))
))
))
;

// copy a Entity
Void copyInternal(Entity target):
copyObjectToClipboard(target)  
;
// copy a list of Entitys
Void copyInternalEntityList(List[Entity] list):
copyObjectToClipboard(list)  
;

// copy a Relation
Void copyInternal(Relation target):
copyObjectToClipboard(target)  
;
// copy a list of Relations
Void copyInternalRelationList(List[Relation] list):
copyObjectToClipboard(list)  
;

// copy a Link
Void copyInternal(Link target):
copyObjectToClipboard(target)  
;
// copy a list of Links
Void copyInternalLinkList(List[Link] list):
copyObjectToClipboard(list)  
;

// copy a Port
Void copyInternal(Port target):
copyObjectToClipboard(target)  
;
// copy a list of Ports
Void copyInternalPortList(List[Port] list):
copyObjectToClipboard(list)  
;

// Entry point for cut
Void cut(Object obj):
copyInternal(obj) -> cutInternal(obj)
;

// dummy for matching
Void cutInternal(Object obj):
 null
;

// Entry point for list cut since Xtend can't match over list type.
Void cutInternal(List[Object] list):
let EntityList = list.select(e|e.metaType == Entity):
let RelationList = list.select(e|e.metaType == Relation):
let LinkList = list.select(e|e.metaType == Link):
let PortList = list.select(e|e.metaType == Port):
(if (!EntityList.isEmpty) then (cutInternalEntityList(EntityList)) else (
(if (!RelationList.isEmpty) then (cutInternalRelationList(RelationList)) else (
(if (!LinkList.isEmpty) then (cutInternalLinkList(LinkList)) else (
(if (!PortList.isEmpty) then (cutInternalPortList(PortList)) else (
null
))
))
))
))
;

// cut a Entity
Void cutInternal(Entity target):
null //TODO: implement me 
;
// cut a list of Entitys
Void cutInternalEntityList(List[Entity] list):
null //TODO: implement me 
;

// cut a Relation
Void cutInternal(Relation target):
null //TODO: implement me 
;
// cut a list of Relations
Void cutInternalRelationList(List[Relation] list):
null //TODO: implement me 
;

// cut a Link
Void cutInternal(Link target):
null //TODO: implement me 
;
// cut a list of Links
Void cutInternalLinkList(List[Link] list):
null //TODO: implement me 
;

// cut a Port
Void cutInternal(Port target):
null //TODO: implement me 
;
// cut a list of Ports
Void cutInternalPortList(List[Port] list):
null //TODO: implement me 
;

// Paste

// dummy operation for no match
Void pasteInternal(Object noop0, Object noop1):
 null
;

// determine whether or not a list is of type Entity
Boolean isEntityList(List[Object] list):
 let head = list.get(0):
 head.metaType == Entity
;
// determine whether or not a list is of type Relation
Boolean isRelationList(List[Object] list):
 let head = list.get(0):
 head.metaType == Relation
;
// determine whether or not a list is of type Link
Boolean isLinkList(List[Object] list):
 let head = list.get(0):
 head.metaType == Link
;
// determine whether or not a list is of type Port
Boolean isPortList(List[Object] list):
 let head = list.get(0):
 head.metaType == Port
;

// Entry point for list paste since Xtend can't match over list type.
Void paste(List[Object] list):
let EntityList = list.select(e|e.metaType == Entity):
let RelationList = list.select(e|e.metaType == Relation):
let LinkList = list.select(e|e.metaType == Link):
let PortList = list.select(e|e.metaType == Port):
(if (!isClipboardEmpty()) then (
(if (!EntityList.isEmpty) then (pasteEntityList(EntityList)) else (
(if (!RelationList.isEmpty) then (pasteRelationList(RelationList)) else (
(if (!LinkList.isEmpty) then (pasteLinkList(LinkList)) else (
(if (!PortList.isEmpty) then (pastePortList(PortList)) else (
null
))
))
))
))
))
;

///////////////////////////////
// Entity     
///////////////////////////////

    // paste onto a Entity
    Void paste(Entity target):
        if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
    ;

    // Entry point for list paste since Xtend can't match over list type.
    Void pasteInternal(Entity target, List[Object] list):
        (if (isEntityList(list)) then pasteInternalEntityList(target, list) else 
        (if (isRelationList(list)) then pasteInternalRelationList(target, list) else 
        (if (isLinkList(list)) then pasteInternalLinkList(target, list) else 
        (if (isPortList(list)) then pasteInternalPortList(target, list) else 
        null
        )
        )
        )
        )
    ;

    // paste a Entity onto a Entity
    Void pasteInternal(Entity target, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a Entity
    Void pasteInternalEntityList(Entity target, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a Entity
    Void pasteInternal(Entity target, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a Entity
    Void pasteInternalRelationList(Entity target, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a Entity
    Void pasteInternal(Entity target, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a Entity
    Void pasteInternalLinkList(Entity target, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a Entity
    Void pasteInternal(Entity target, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a Entity
    Void pasteInternalPortList(Entity target, List[Port] sources):
     null //TODO: implement me
    ;
        
    
///////////////////////////////
// List of Entitys     
///////////////////////////////
    
    // paste onto a list of Entitys
    Void pasteEntityList(List[Entity] targets):
     let clipBoard = getObjectFromClipboard():
     pasteEntityList(targets, clipBoard)
    ;
    
    // Entry point for list paste since Xtend can't match over list type.
    Void pasteEntityList(List[Entity] targets, List[Object] list):
        (if (isEntityList(list)) then pasteEntityListEntityList(targets, list) else 
        (if (isRelationList(list)) then pasteEntityListRelationList(targets, list) else 
        (if (isLinkList(list)) then pasteEntityListLinkList(targets, list) else 
        (if (isPortList(list)) then pasteEntityListPortList(targets, list) else 
        null
        )
        )
        )
        )
    ;
    
    // paste a Entity onto a list of Entitys
    Void pasteEntityList(List[Entity] targets, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a list of Entitys
    Void pasteEntityListEntityList(List[Entity] targets, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a list of Entitys
    Void pasteEntityList(List[Entity] targets, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a list of Entitys
    Void pasteEntityListRelationList(List[Entity] targets, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a list of Entitys
    Void pasteEntityList(List[Entity] targets, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a list of Entitys
    Void pasteEntityListLinkList(List[Entity] targets, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a list of Entitys
    Void pasteEntityList(List[Entity] targets, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a list of Entitys
    Void pasteEntityListPortList(List[Entity] targets, List[Port] sources):
     null //TODO: implement me
    ;
        
///////////////////////////////
// Relation     
///////////////////////////////

    // paste onto a Relation
    Void paste(Relation target):
        if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
    ;

    // Entry point for list paste since Xtend can't match over list type.
    Void pasteInternal(Relation target, List[Object] list):
        (if (isEntityList(list)) then pasteInternalEntityList(target, list) else 
        (if (isRelationList(list)) then pasteInternalRelationList(target, list) else 
        (if (isLinkList(list)) then pasteInternalLinkList(target, list) else 
        (if (isPortList(list)) then pasteInternalPortList(target, list) else 
        null
        )
        )
        )
        )
    ;

    // paste a Entity onto a Relation
    Void pasteInternal(Relation target, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a Relation
    Void pasteInternalEntityList(Relation target, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a Relation
    Void pasteInternal(Relation target, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a Relation
    Void pasteInternalRelationList(Relation target, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a Relation
    Void pasteInternal(Relation target, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a Relation
    Void pasteInternalLinkList(Relation target, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a Relation
    Void pasteInternal(Relation target, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a Relation
    Void pasteInternalPortList(Relation target, List[Port] sources):
     null //TODO: implement me
    ;
        
    
///////////////////////////////
// List of Relations     
///////////////////////////////
    
    // paste onto a list of Relations
    Void pasteRelationList(List[Relation] targets):
     let clipBoard = getObjectFromClipboard():
     pasteRelationList(targets, clipBoard)
    ;
    
    // Entry point for list paste since Xtend can't match over list type.
    Void pasteRelationList(List[Relation] targets, List[Object] list):
        (if (isEntityList(list)) then pasteRelationListEntityList(targets, list) else 
        (if (isRelationList(list)) then pasteRelationListRelationList(targets, list) else 
        (if (isLinkList(list)) then pasteRelationListLinkList(targets, list) else 
        (if (isPortList(list)) then pasteRelationListPortList(targets, list) else 
        null
        )
        )
        )
        )
    ;
    
    // paste a Entity onto a list of Relations
    Void pasteRelationList(List[Relation] targets, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a list of Relations
    Void pasteRelationListEntityList(List[Relation] targets, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a list of Relations
    Void pasteRelationList(List[Relation] targets, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a list of Relations
    Void pasteRelationListRelationList(List[Relation] targets, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a list of Relations
    Void pasteRelationList(List[Relation] targets, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a list of Relations
    Void pasteRelationListLinkList(List[Relation] targets, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a list of Relations
    Void pasteRelationList(List[Relation] targets, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a list of Relations
    Void pasteRelationListPortList(List[Relation] targets, List[Port] sources):
     null //TODO: implement me
    ;
        
///////////////////////////////
// Link     
///////////////////////////////

    // paste onto a Link
    Void paste(Link target):
        if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
    ;

    // Entry point for list paste since Xtend can't match over list type.
    Void pasteInternal(Link target, List[Object] list):
        (if (isEntityList(list)) then pasteInternalEntityList(target, list) else 
        (if (isRelationList(list)) then pasteInternalRelationList(target, list) else 
        (if (isLinkList(list)) then pasteInternalLinkList(target, list) else 
        (if (isPortList(list)) then pasteInternalPortList(target, list) else 
        null
        )
        )
        )
        )
    ;

    // paste a Entity onto a Link
    Void pasteInternal(Link target, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a Link
    Void pasteInternalEntityList(Link target, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a Link
    Void pasteInternal(Link target, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a Link
    Void pasteInternalRelationList(Link target, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a Link
    Void pasteInternal(Link target, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a Link
    Void pasteInternalLinkList(Link target, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a Link
    Void pasteInternal(Link target, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a Link
    Void pasteInternalPortList(Link target, List[Port] sources):
     null //TODO: implement me
    ;
        
    
///////////////////////////////
// List of Links     
///////////////////////////////
    
    // paste onto a list of Links
    Void pasteLinkList(List[Link] targets):
     let clipBoard = getObjectFromClipboard():
     pasteLinkList(targets, clipBoard)
    ;
    
    // Entry point for list paste since Xtend can't match over list type.
    Void pasteLinkList(List[Link] targets, List[Object] list):
        (if (isEntityList(list)) then pasteLinkListEntityList(targets, list) else 
        (if (isRelationList(list)) then pasteLinkListRelationList(targets, list) else 
        (if (isLinkList(list)) then pasteLinkListLinkList(targets, list) else 
        (if (isPortList(list)) then pasteLinkListPortList(targets, list) else 
        null
        )
        )
        )
        )
    ;
    
    // paste a Entity onto a list of Links
    Void pasteLinkList(List[Link] targets, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a list of Links
    Void pasteLinkListEntityList(List[Link] targets, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a list of Links
    Void pasteLinkList(List[Link] targets, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a list of Links
    Void pasteLinkListRelationList(List[Link] targets, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a list of Links
    Void pasteLinkList(List[Link] targets, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a list of Links
    Void pasteLinkListLinkList(List[Link] targets, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a list of Links
    Void pasteLinkList(List[Link] targets, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a list of Links
    Void pasteLinkListPortList(List[Link] targets, List[Port] sources):
     null //TODO: implement me
    ;
        
///////////////////////////////
// Port     
///////////////////////////////

    // paste onto a Port
    Void paste(Port target):
        if (!isClipboardEmpty()) then pasteInternal(target, getObjectFromClipboard())
    ;

    // Entry point for list paste since Xtend can't match over list type.
    Void pasteInternal(Port target, List[Object] list):
        (if (isEntityList(list)) then pasteInternalEntityList(target, list) else 
        (if (isRelationList(list)) then pasteInternalRelationList(target, list) else 
        (if (isLinkList(list)) then pasteInternalLinkList(target, list) else 
        (if (isPortList(list)) then pasteInternalPortList(target, list) else 
        null
        )
        )
        )
        )
    ;

    // paste a Entity onto a Port
    Void pasteInternal(Port target, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a Port
    Void pasteInternalEntityList(Port target, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a Port
    Void pasteInternal(Port target, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a Port
    Void pasteInternalRelationList(Port target, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a Port
    Void pasteInternal(Port target, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a Port
    Void pasteInternalLinkList(Port target, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a Port
    Void pasteInternal(Port target, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a Port
    Void pasteInternalPortList(Port target, List[Port] sources):
     null //TODO: implement me
    ;
        
    
///////////////////////////////
// List of Ports     
///////////////////////////////
    
    // paste onto a list of Ports
    Void pastePortList(List[Port] targets):
     let clipBoard = getObjectFromClipboard():
     pastePortList(targets, clipBoard)
    ;
    
    // Entry point for list paste since Xtend can't match over list type.
    Void pastePortList(List[Port] targets, List[Object] list):
        (if (isEntityList(list)) then pastePortListEntityList(targets, list) else 
        (if (isRelationList(list)) then pastePortListRelationList(targets, list) else 
        (if (isLinkList(list)) then pastePortListLinkList(targets, list) else 
        (if (isPortList(list)) then pastePortListPortList(targets, list) else 
        null
        )
        )
        )
        )
    ;
    
    // paste a Entity onto a list of Ports
    Void pastePortList(List[Port] targets, Entity source):
     null //TODO: implement me
    ;
        
    // paste a list of Entitys onto a list of Ports
    Void pastePortListEntityList(List[Port] targets, List[Entity] sources):
     null //TODO: implement me
    ;
        
    // paste a Relation onto a list of Ports
    Void pastePortList(List[Port] targets, Relation source):
     null //TODO: implement me
    ;
        
    // paste a list of Relations onto a list of Ports
    Void pastePortListRelationList(List[Port] targets, List[Relation] sources):
     null //TODO: implement me
    ;
        
    // paste a Link onto a list of Ports
    Void pastePortList(List[Port] targets, Link source):
     null //TODO: implement me
    ;
        
    // paste a list of Links onto a list of Ports
    Void pastePortListLinkList(List[Port] targets, List[Link] sources):
     null //TODO: implement me
    ;
        
    // paste a Port onto a list of Ports
    Void pastePortList(List[Port] targets, Port source):
     null //TODO: implement me
    ;
        
    // paste a list of Ports onto a list of Ports
    Void pastePortListPortList(List[Port] targets, List[Port] sources):
     null //TODO: implement me
    ;
        

    