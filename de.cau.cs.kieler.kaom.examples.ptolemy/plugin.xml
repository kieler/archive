<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<plugin>
   <extension
         point="de.cau.cs.kieler.kex">
      <category
            description="Ptolemy Demos imported to KAOM"
            icon="icons/ptolemy.gif"
            id="de.cau.cs.kieler.kaom.ptolemy"
            parent_category="de.cau.cs.kieler.kaom"
            title="Ptolemy">
      </category>
      <category
            description="The component interaction (CI) domain models systems that blend data-driven and demand-driven styles of computation. As an example, the interaction between a web server and a browser is mostly demand-driven. When the user clicks on a link in the browser, it pulls the corresponding page from the web server. A stock-quote service can use a data-driven style of computation. The server generates events when stock prices change. The data drive the clients to update their displayed information. Such push/pull interaction between a data producer and consumer is common in distributed systems, and has been included in middleware services, most notably in the CORBA event service. These services motivated the design of this domain to study the interaction models in distributed systems, such as stock-quote services, traffic or weather information systems. Other applications include database systems, file systems, and the Click modular router. An actor in a CI model can be active, which means it possesses its own thread of execution. For example, an interrupt source of an embedded system can be modeled as an active source actor. Such a source generates events asynchronously with respect to the software execution on the embedded processor. CI models can be used to simulate and study how the embedded software handles the asynchronous events, such as external interrupts and asynchronous I/O."
            id="de.cau.cs.kieler.kaom.ptolemy.ci"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Component Interaction (CI)">
      </category>
      <category
            description="The domain models systems with continuous dynamics, including for example analog circuits and mechanical systems, but also cleanly supports discrete events, modal behaviors, and signals that mix continuous-time behaviors with discrete events. Models for continuous dynamics are equivalent to linear or nonlinear integral equations. A sophisticated numerical solver for these equations is integrated with the director. The clean semantics of the Continuous domain enables its integration in hierarchical heterogeneous models that use the Synchronous/Reactive (SR) and Discrete Event (DE) domains. Arbitrary hierarchical mixtures of these domains are supported, although if SR is at the top level, then the period parameter of the director must be used so that time advances."
            id="de.cau.cs.kieler.kaom.ptolemy.continuous"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Continuous-time modeling">
      </category>
      <category
            description="The Communicating Sequential Processes (CSP) domain in Ptolemy II models a system as a network of processes communicating with messages through unidirectional channels. If a process is ready to send a message, it blocks until the receiving process is ready to accept it. Similarly if a process is ready to accept a message, it blocks until the sending process is ready to send it. Thus the communication between processes is rendezvous based as both the reading and writing processes block until the other side is ready to communicate. This model of computation is non-deterministic as a process can be blocked waiting to send or receive on any number of channels. It is also highly concurrent due to the nature of the model."
            id="de.cau.cs.kieler.kaom.ptolemy.csp"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Communicating Sequential Processes">
      </category>
      <category
            description="The Distributed Discrete Event (DDE) domain incorporates a distributed notion of time into a dataflow style communication semantic. Much of the functionality of the DDE domain is consistent with the Process Networks domain. In particular, this model of computation&apos;s mechanism for dealing with blocking due to empty or full queues is functionally identical to that of the PN domain.The DDE domain&apos;s use of time serves as the point of divergence in the respective designs of DDE and PN. Time progress is communicated between actors by passing tokens that have time stamps associated with them. In a network of DDE actors each actor has a local notion of time.The DDE domain is an experimental domain, the code has not been reviewed, and the interfaces are likely to change."
            id="de.cau.cs.kieler.kaom.ptolemy.dde"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Distributed Discrete Event">
      </category>
            <category
            description="The Discrete Time (DT) domain is a timed extension of the Synchronous Dataflow (SDF) domain. Like SDF, it has static scheduling of the dataflow graph model. Likewise, DT requires that the rates on the ports of all actors be known beforehand and fixed. DT handles feedback systems in the same way that SDF does, but with additional constraints on initial tokens."
            id="de.cau.cs.kieler.kaom.ptolemy.dt"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Discrete Time">
      </category>
      <category
            description="Giotto is a domain designed by Christoph Meyer Kirsch to realize the semantics of the Giotto language, designed by Tom Henzinger, Ben Horowitz, and Christoph Meyer Kirsch. The semantics is a particular flavor of a synchronous model. Each component executes a specified number of times per iteration. The number of times it executes is called its frequency, and it defaults to one. The frequency can be specified to be something other than one by simply adding a parameter to the component named frequency, and then giving it a value different from one."
            id="de.cau.cs.kieler.kaom.ptolemy.giotto"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Giotto">
      </category>
      <category
            description="The GR domain is an experimental domain designed for three dimensional graphical animations. It is an untimed domain with particular optimizations aimed at reducing recomputations of scene graph components. A model consists of a set of three dimensional graphical elements, such as spheres, cylinders, etc., composed and transformed to form a scene graph. It is particularly interesting and useful to couple this domain with others, where the other domains provide the transformations for the graphical elements. For example, a model of a physical system might be constructed in CT and animated in GR.  Note that GR domain demos require Java3D."
            id="de.cau.cs.kieler.kaom.ptolemy.gr"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Graphics">
      </category>
      <category
            id="de.cau.cs.kieler.kaom.ptolemy.petrinet"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Petri Net">
      </category>
      <category
            description="To model hardware and embedded applications, a highly concurrent model of computation is required. The PN domain in Ptolemy II presents a mechanism to model concurrency using the Kahn process networks model of computation [1]. The process networks model of computation has a dataflow flavor to it. This makes it well suited to modeling embedded dataflow applications and hardware architectures."
            id="de.cau.cs.kieler.kaom.ptolemy.pn"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Process Networks">
      </category>
      <category
            description="The Heterochronous Dataflow (HDF) domain, created by Ye Zhou, is an extension of the Synchronous Dataflow (SDF) domain. In SDF, the set of port rates (called rate signatures) of an actor are constant. In HDF, however, rate signatures are allowed to change between iterations of the HDF schedule. The change of rate signatures can be modeled by state transitions of a modal model, in which each state refinement infers a set of rate signatures. Within each state, the HDF model behaves like an SDF model."
            id="de.cau.cs.kieler.kaom.ptolemy.hdf"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Heterochronous Dataflow Domain">
      </category>
      <category
            description="The Dynamic Dataflow (DDF) domain is a superset of the Synchronous Dataflow (SDF) and Boolean dataflow (BDF) domains. In the SDF domain, an actor consumes and produces a fixed number of tokens per firing. This static information makes possible compile-time scheduling. In the DDF domain, an actor could change the production and consumption rates after each firing. The scheduler makes no attempt to construct a compile-time schedule, neither does it attempt to statically answer questions about deadlock and boundedness, which are fundamentally undecidable. Instead, each actor has a set of sequential firing rules (patterns) and can be fired if one of them is satisfied, i.e., one particular firing pattern forms a prefix of sequences of unconsumed tokens at input ports. The scheduler dynamically schedules the firing of actors according to some criteria. The canonical actors in the DDF domain include Select and Switch, which consume or produce tokens on different channels based on the token received from the control port."
            id="de.cau.cs.kieler.kaom.ptolemy.ddf"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Dynamic Dataflow">
      </category>
      <category
            description="The Ptolemy II Discrete Event (DE) domain provides a general environment for time-oriented simulations of systems such as queueing systems, communication networks, and hardware systems. In this domain, actors communicate by sending tokens across connections. The token sent and the time at which the action took place constitute an event in the DE domain. Upon receiving an event, the destination actor is activated and a reaction take place. The reaction may change the internal state of the actor and possibly generate new events, resulting in further reactions. A DE domain scheduler ensures that events are processed chronologically."
            id="de.cau.cs.kieler.kaom.ptolemy.de"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title=" Discrete Event">
      </category>
      <category
            description="The Parameterized Synchronous Dataflow (PSDF) domain is an extension of the Synchronous Dataflow (SDF) domain that allows for more extensive reconfiguration of models. The SDF domain uses static analysis of variable dependence to detect cases where rate parameters may change. By default, SDF disallows reconfiguration of all rate parameters. If rate parameters are allowed to change, then SDF checks that rate parameters do not change during execution of the schedule, and declares that inferred rate parameters for external ports change as often as the internal rate parameters."
            id="de.cau.cs.kieler.kaom.ptolemy.psdf"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Parameterized Synchronous Dataflow">
      </category>
       <category
            description="The Ptera (Ptolemy Event Relation Actor) domain is a discrete-event model of computation. A model in Ptera is represented with a graph of nodes and edges, where nodes represent events and directed edges between events represent scheduling relation. One or more events can be selected as initial events, which are scheduled at model time 0.0. When an event is fired, it possibly performs certain actions, and if there are outgoing edges from that event, the events at the end points of those edges are scheduled after non-negative delays. One or more events can also be selected as final events. The firing of final events causes the event queue to be emptied after their actions are performed, and therefore no more events can be processed."
            id="de.cau.cs.kieler.kaom.ptolemy.ptera"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Ptolemy Event Relation Actor">
      </category>
      <category
            description="A brief introduction to the Pthales domain. The MoC is multidimensional dataflow: tokens are multidimensional (MD) arrays. An up-stream actor produces an MD array in multiple firings, as defined by a set of parameters, explained below. The director fires all actors conceptually in order of dependencies. Feedback loops are currently not supported, so graphs are acyclic and such an order is well-defined."
            id="de.cau.cs.kieler.kaom.ptolemy.pthales"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Pthales">
      </category>
      <category
            id="de.cau.cs.kieler.kaom.ptolemy.ptides"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Ptides">
      </category>
      <category
            description="In the Rendezvous domain in Ptolemy II, each actor executes in its own thread of control, and communication between actors is by rendezvous. If an actor is ready to send a message, it blocks until the receiving actor is ready to receive it. Similarly if an actor is ready to receive a message, it blocks until the sending actor is ready to send it."
            id="de.cau.cs.kieler.kaom.ptolemy.rendezvous"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Rendezvous">
      </category>
      <category
            description="Synchronous dataflow (SDF) is a special case of dataflow where the flow of control is sufficiently regular to be completely predictable at compile time. An SDF model is an interconnection of actors whose firings are enabled by fixed, pre-specified numbers of tokens on each of their inputs. Moreover, when an actor fires, it produces a fixed, pre-specified number of tokens on each of its outputs. The fact that these numbers are fixed makes it possible for a scheduler to determine the firing sequence at the time the model is initialized. Thus, SDF models are quite efficient, in that there is no multithreading needed, and run-time overhead consists only of a very simple dispatcher that implements the pre-computed schedule."
            id="de.cau.cs.kieler.kaom.ptolemy.sdf"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Synchronous Dataflow">
      </category>
      <category
            description="no description"
            id="de.cau.cs.kieler.kaom.ptolemy.sequence"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Sequence">
      </category>
      <category
            description="In the synchronous/reactive (SR) model of computation , the arcs represent data values that are aligned with global clock ticks. Thus, they are discrete signals, but unlike discrete time, a signal need not have a value at every clock tick. The entities represent relations between input and output values at each tick, and are usually partial functions with certain technical restrictions to ensure determinacy. Examples of languages that use the SR model of computation include Esterel, Signal, Lustre, and Argos."
            id="de.cau.cs.kieler.kaom.ptolemy.sr"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Synchronous Reactive">
      </category>
      <category
      		description="no description"
            id="de.cau.cs.kieler.kaom.ptolemy.taskpt"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="Task PT">
      </category>
      <category
			description="no description"
            id="de.cau.cs.kieler.kaom.ptolemy.tdl"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="TDL">
      </category>
      <category
			description="no description"
            id="de.cau.cs.kieler.kaom.ptolemy.tm"
            parent_category="de.cau.cs.kieler.kaom.ptolemy"
            title="TM">
      </category>
       <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ci"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates queue management using push and pull style communication in distributed systems. The &quot;Distributor&quot; actor will route packets to the two queues. It monitors the sizes of the queues to help it make decisions."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ci.Router"
            overview_pic="images/ci_Router.png"
            root_directory="models/ci"
            title="Router">
         <resource
               direct_open="false"
               local_path="models/ci/ci_Router.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ci/ci_Router.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ci/ci_Router.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This continuous-time model uses a modal model to simulate a bouncing ball and the GR domain to animate it. This is a classic example of a Zeno system, where an infinite number of bounce events occur in a finite time."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.BouncingBall"
            overview_pic="images/continuous_BouncingBallWithoutGR.png"
            root_directory="models/continuous"
            title="Bouncing Ball">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_BouncingBallWithoutGR.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_BouncingBallWithoutGR.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_BouncingBallWithoutGR.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="Brownian motion is the integral of white noise. This model generates approximations of two Brownian motion random processes and plots the value of one vs. the other. This creates a random walk effect. White noise is approximated as a signal where any two samples are independent and identically distributed Gaussian random variables."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Brownian"
            overview_pic="images/continuous_Brownian.png"
            root_directory="models/continuous"
            title="Brownian">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Brownian.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Brownian.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Brownian.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model models a pendulum on a moving cart. The card moves in the x dimension and the pendulum moves in x-z plane, as shown in the image above. The pendulum collides with the surface of the cart and bounces back with some energy loss, specified by the lambda parameter. There is no extra force except the gravity force applied on the pendulum. In the 3D animation, the x dimension is coming out of the screen. This model is a Zeno model, where an infinite number of events occur in a finite time. The model has two modes, one for pre-Zeno and for post-Zeno dynamics. This illustrates the ability to model Zeno systems in a reasonable way."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.CartPendulum"
            overview_pic="images/continuous_CartPendulum.png"
            root_directory="models/continuous"
            title="Cart Pendulum">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_CartPendulum.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_CartPendulum.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_CartPendulum.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a simple adaptive cruise control system, illustrating model-integrated control strategies. A leading car model produces information that is observed with possible flaws by a following car. If the following car detects flaws, it uses a conservative strategy. Otherwise, it tracks the leading car closely."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.CarTracking"
            overview_pic="images/continuous_CarTracking.png"
            root_directory="models/continuous"
            title="CarTracking">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_CarTracking.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_CarTracking.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_CarTracking.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This demo illustrates discrete and continuous clocks in the Continuous domain. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.ComparedClocks"
            overview_pic="images/continuous_ComparedClocks.png"
            root_directory="models/continuous"
            title="Compared Clocks">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_ComparedClocks.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_ComparedClocks.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_ComparedClocks.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="Combination of discrete-event modeling (at the top level) and continuous-time modeling (below that). This example models a job shop where job arrivals are discrete events, the processing rate is given by an exponential random variable, and the job processing is modeled in continuous time with an opaque composite actor."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.InsideDE"
            overview_pic="images/continuous_ContinuousInsideDE.png"
            root_directory="models/continuous"
            title="Continuous Inside DE">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_ContinuousInsideDE.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_ContinuousInsideDE.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_ContinuousInsideDE.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model plots an approximate efficiency curve for a hypothetical internal combustion engine."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.EfficiencyCurve"
            overview_pic="images/continuous_EfficiencyCurve.png"
            root_directory="models/continuous"
            title="Efficiency Curve">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_EfficiencyCurve.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_EfficiencyCurve.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_EfficiencyCurve.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="The Furuta pendulum has a motor controlling the angle of an arm, from which a free-swinging pendulum hangs. The objective is to swing the pendulum up and then balance it."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.FurutaPendulum"
            overview_pic="images/continuous_FurutaPendulum.png"
            root_directory="models/continuous"
            title="Furuta Pendulum">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_FurutaPendulum.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_FurutaPendulum.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_FurutaPendulum.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows that the Continuous director gives a correct execution of a hierarchical continuous-time model. By correct execution, we mean the simulation results (signals) of the hierarchical model are the same as the results of the same model with the hierarchy removed."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.HierarchicalExecution"
            overview_pic="images/continuous_HierarchicalExecution.png"
            root_directory="models/continuous"
            title="Hierarchical Execution">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_HierarchicalExecution.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_HierarchicalExecution.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_HierarchicalExecution.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="Hybrid model of a plant where a continuous flow of raw material is directed into bottles as the bottles (jobs) arrive. The top level is a discrete-event model with a modal continuous-time model inside."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.HybridPlant"
            overview_pic="images/continuous_HybridPlant.png"
            root_directory="models/continuous"
            title="Hybrid Plant">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_HybridPlant.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_HybridPlant.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_HybridPlant.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demonstrates the use of a modal model to implement hysteresis."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Hysteresis"
            overview_pic="images/continuous_Hysteresis.png"
            root_directory="models/continuous"
            title="Hysteresis">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Hysteresis.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Hysteresis.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Hysteresis.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model is an example of a stochastic hybrid system. It generates a Poisson process with a linearly increasing rate using the Continuous domain. The model plots the events vs. time and a histogram of the time between events. The technique here was suggested by John Lygeros."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.IncreasingRatePoisson"
            overview_pic="images/continuous_IncreasingRatePoisson.png"
            root_directory="models/continuous"
            title="Increasing Rate Poisson">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_IncreasingRatePoisson.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_IncreasingRatePoisson.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_IncreasingRatePoisson.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows how level crossing detector handles the continuous signals with and w/o discontinuity. The level crossing detector has two operation modes. For continuous signals, the detector try to refine step size to find the point level crossing happens. At the time points where discontinuities happen, the detector does not try to refine step size (which is 0.0 already), but to detect the level crossing only."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.LevelCrossingDetector"
            overview_pic="images/continuous_LevelCrossingDetector.png"
            root_directory="models/continuous"
            title="Level Crossing Detector">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_LevelCrossingDetector.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_LevelCrossingDetector.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_LevelCrossingDetector.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a nonlinear feedback system that exhibits chaotic behavior. It is modeled in continuous time. The Continuous director uses a sophisticated ordinary differential equation solver to execute the model. This particular model is known as a Lorenz attractor."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Lorenz"
            overview_pic="images/continuous_Lorenz.png"
            root_directory="models/continuous"
            title="Lorenz">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Lorenz.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Lorenz.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Lorenz.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model simulates Newton&apos;s cradle with three balls. Newton&apos;s cradle is a toy with steel balls hanging on strings and colliding with one another."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.NewtonsCradle"
            overview_pic="images/continuous_NewtonsCradle.png"
            root_directory="models/continuous"
            title="Newtons Cradle">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_NewtonsCradle.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_NewtonsCradle.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_NewtonsCradle.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demonstrates the use of bandlimited noise together with a modal model that implements hysteresis."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Noise"
            overview_pic="images/continuous_Noise.png"
            root_directory="models/continuous"
            title="Noise">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Noise.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Noise.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Noise.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model measures the power spectrum of bandlimited noise and compares it against the theoretical value of the spectrum. Notice that the sidebands decay slightly more slowly than the theory predicts because of aliasing distortion. You can experiment with the bandwidth of the noise."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.NoiseSpectrum"
            overview_pic="images/continuous_NoiseSpectrum.png"
            root_directory="models/continuous"
            title="NoiseSpectrum">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_NoiseSpectrum.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_NoiseSpectrum.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_NoiseSpectrum.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model generates a Poisson process using the Continuous domain. The time between events is an exponential random variable. The model plots the events vs. time and a histogram of the time between events, which should be exponentially distributed. The method used here would tolerate time-varying rates, although that is not shown in this example."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Poisson"
            overview_pic="images/continuous_Poisson.png"
            root_directory="models/continuous"
            title="Poisson">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Poisson.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Poisson.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Poisson.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="Hybrid model of a plant where a continuous flow of raw material is directed into bottles as the bottles (jobs) arrive. The top level is a discrete-event model with a modal continuous-time model inside. Model parameters are to the right. This model uses a PoissonClock to simulate the random arrival of events. Contrast this with the HybridPlant model which uses a Clock to simulate a deterministic arrival of events."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.RandomHybridPlant"
            overview_pic="images/continuous_RandomHybridPlant.png"
            root_directory="models/continuous"
            title="Random Hybrid Plant">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_RandomHybridPlant.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_RandomHybridPlant.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_RandomHybridPlant.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates continuous-time signals and discrete signals. It shows that samples of a piecewise continuous signal have the value of the signal at the start of the discontinuity, as one would expect in hardware samplers that require a setup time.  In the semantics of HyVisual (and continuous-time in Ptolemy II), piecewise continuous signals have more than one value at the time of the discontinuity. Discrete signals can also be sampled, but if the discrete signal has only one value at each discrete time, then the samples will reflect exactly that value. In this example, a triggered sampler is used to sample the discrete signal, and every second discrete clock output is sampled."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.SampledClocks"
            overview_pic="images/continuous_SampledClocks.png"
            root_directory="models/continuous"
            title="Sampled Clocks">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_SampledClocks.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_SampledClocks.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_SampledClocks.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows how a satellite moves around the earth and moon under the gravity. We assume that the satellite, the earth, and the moon are in the same plane. We also assume there is no friction and the earth and moon are prefectly round."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Satellite"
            overview_pic="images/continuous_Satellite.png"
            root_directory="models/continuous"
            title="Satellite">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Satellite.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Satellite.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Satellite.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This is a mixed-signal model of a MEMS accelerometer using a digital feedback controller to limit the displacement of the silicon beams. The technique, which is related to Sigma-Delta A/D converters, is due to Mark Lemkin (Ph.D. thesis, 1997, UC Berkeley). The accelerometer is modeled as a second order differential system. The acceleration is sampled, filtered, and fed back to produce a countering electrostatic force."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.SigmaDelta"
            overview_pic="images/continuous_SigmaDelta.png"
            root_directory="models/continuous"
            title="Sigma Delta">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_SigmaDelta.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_SigmaDelta.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_SigmaDelta.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows one way to generate a sinuoid using a marginally stable feedback system. The second integrator has a non-zero initial state, which gets things started."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Sinusoid"
            overview_pic="images/continuous_Sinusoid.png"
            root_directory="models/continuous"
            title="Sinusoid">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Sinusoid.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Sinusoid.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Sinusoid.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows the square-wave response of a continuous-time transfer function.  The ContinuousTransferFunction actor constructs a composite actor to realize the specified transfer function."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.SquareWave"
            overview_pic="images/continuous_SquareWave.png"
            root_directory="models/continuous"
            title="Square Wave">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_SquareWave.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_SquareWave.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_SquareWave.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model simulates the flight dynamics of the Starmac quadrotor aircraft and then uses Java3D to show the results."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Starmac"
            overview_pic="images/continuous_Starmac.png"
            root_directory="models/continuous"
            title="Starmac">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Starmac.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Starmac.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Starmac.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows how to handle hybrid systems with both continuousand discrete inputs (and outputs). The DiscreteClock actor generates a sequence of discrete events which trigger the transition of the FSM inside the continuous time composite actor. The FSM routes one of the two continuous time input signals to the output."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Switch"
            overview_pic="images/continuous_Switch.png"
            root_directory="models/continuous"
            title="Switch">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Switch.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Switch.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Switch.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="Thermostat model showing heating a cooling cycles. In this model, the refinements of the modes in the state machine are the same model, and the parameters of the model are changed when state transitions are taken."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Thermostat"
            overview_pic="images/continuous_Thermostat.png"
            root_directory="models/continuous"
            title="Thermostat">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Thermostat.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Thermostat.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Thermostat.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model represents an automobile transmission, a classic example of a hybrid system. The inputs to &quot;car model&quot; hybrid system are the current applied gear and the current throttle position.  In this model, the gear shift sequence is predetermined, and the throttle is applied constantly.  It is assumed that shifts from one gear to another occur instantaneously."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.Transmission"
            overview_pic="images/continuous_Transmission.png"
            root_directory="models/continuous"
            title="Transmission">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Transmission.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_Transmission.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_Transmission.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.continuous"
            contact="kieler@informatik.uni-kiel.de"
            description="Vehicle-to-vehicle control system, as designed by U. Penn for Mobies. The controller in FollowingPlatoon is a modal controller with the objective of following the LeadingPlatoon."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.continuous.V2V"
            overview_pic="images/continuous_V2V.png"
            root_directory="models/continuous"
            title="V2V">
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_V2V.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/continuous/continuous_V2V.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/continuous/continuous_V2V.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.csp"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates a design pattern with CSP called a &quot;barrier synchronization&quot;. In this example, the two Ramps are sending increasing sequences of integers to the Displays. However, the transfer is constrained to occur only when the Barrier actor reads inputs. Thus, a multi-way rendezvous between the two Ramp actors, the two Display actors, and the Barrier actor constrains the two transfers to the Display actors to occur simultaneously.  The Barrier actor, after reading inputs, will rendezvous with the Sleep actor connected to its output.  This sleep actor will sleep a random amount of time after reading its input, and during that time will not accept additional inputs. Thus, after the first two transfers to the Display actors (why two?) the time between transfers is controlled by the Sleep actor."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.csp.Barrier"
            overview_pic="images/csp_Barrier.png"
            root_directory="models/csp"
            title="Barrier">
         <resource
               direct_open="false"
               local_path="models/csp/csp_Barrier.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/csp/csp_Barrier.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/csp/csp_Barrier.kaod"
               resource_type="file">
         </resource>
      </example>
       <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.csp"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates resource management where a pool (containing only one resource) provides that resource nondeterministically to one of two Sleep actors. The Sleep actor that gets the resource holds it for a fixed amount of time (100 and 150 ms, respectively). After this time, it releases the resource, sending it to an Expression actor, which increments the value of the resource and then returns it to the resource pool.\n\n Note that there is no assurance of fairness in this system, and in fact it is possible for only one of the two Sleep actors to get resources. How could you force this system to be more fair? "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.csp.ResourcePool"
            overview_pic="images/csp_ResourcePool.png"
            root_directory="models/csp"
            title="Resource Pool">
         <resource
               direct_open="false"
               local_path="models/csp/csp_ResourcePool.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/csp/csp_ResourcePool.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/csp/csp_ResourcePool.kaod"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.csp"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates a design pattern with CSP called a &quot;write regulator.&quot; In this example, the Ramp is sending an increasing sequence of integers to the Display. However, the transfer is constrained to occur only when the Sleep actor reads inputs, because in the CSP domain, sending data to multiple recipients via a relation is accomplished via a multi-way rendezvous. The Sleep actor reads data, then sleeps an amount of time given by its bottom input before reading the next input data token. In this case, it will wait a random amount of time between 0 and 2 seconds (0 and 2000 milliseconds) between input readings. This has the side effect of constraining the transfers from the Ramp to the Display to occur with the same random intervals."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.csp.WriteRegulator"
            overview_pic="images/csp_WriteRegulator.png"
            root_directory="models/csp"
            title="Write Regulator">
         <resource
               direct_open="false"
               local_path="models/csp/csp_WriteRegulator.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/csp/csp_WriteRegulator.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/csp/csp_WriteRegulator.kaod"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.dde"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates the localization of Zeno conditions in the Distributed Discrete Event (DDE) domain. The demo consists of two topologically identical branches connected to a clock source actor. Each branch contains a feedback loop and is fed identical tokens from the clock source. As with all feedback loops in DDE (and DE) models, a positive time delay is necessary in feedback loops to prevent deadlock. If the time delay of a given loop is lower bounded by zero but can not be guaranteed to be greater than a fixed positive value, then a Zeno condition occurs in which time will cease to advance even though the actors of the feedback loop continue to execute without deadlocking."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.dde.LocalZeno"
            overview_pic="images/dde_LocalZeno.png"
            root_directory="models/dde"
            title="Local Zeno">
         <resource
               direct_open="false"
               local_path="models/dde/dde_LocalZeno.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/dde/dde_LocalZeno.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/dde/dde_LocalZeno.kaod"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.dde"
            contact="kieler@informatik.uni-kiel.de"
            description="This model is used for testing the &quot;Local Zeno&quot;."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.dde.LocalZenoTest"
            root_directory="models/dde"
            title="Local Zeno Test">
         <resource
               direct_open="false"
               local_path="models/dde/dde_LocalZenoTest.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/dde/dde_LocalZenoTest.kaom"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model computes prime numbers using the sieve of Eratosthenes. It uses the ActorRecursion actor, which clones a composite actor into itself upon firing, thus dynamically expanding the topology of the model. Each iteration outputs one prime number. Change the parameter iterations in DDF Director to specify number of iterations desired."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.Eratosthenes"
            overview_pic="images/ddf_Eratosthenes.png"
            root_directory="models/ddf/"
            title="Eratosthenes">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_Eratosthenes.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_Eratosthenes.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_Eratosthenes.kaod"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model computes factorial using a very inefficient recursive algorithm (to demonstrate the use of ActorRecursion). Each iteration outputs one number. Configure the parameter iterations in DDF Director to specify desired iteration number. Because factorial rises very fast, it is recommended to keep it small to prevent from overflowing."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.Factorial"
            overview_pic="images/ddf_Factorial.png"
            root_directory="models/ddf"
            title="Factorial">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_Factorial.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_Factorial.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_Factorial.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model solves Tower of Hanoi puzzle using the ActorRecursion actor. A tower of disks initially stacked in increasing size on the source tower shall be transferred to the destination tower, moving only at one disk at a time and never a larger one onto a smaller through the third tower. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.HanoiTower"
            overview_pic="images/ddf_HanoiTower.png"
            root_directory="models/ddf"
            title="Hanoi Tower">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_HanoiTower.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_HanoiTower.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_HanoiTower.kaod"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demos DDF domain inside SDF domain. The requiredFiringsPerIteration parameter of DDFBooleanSelect actor in DDF domain defines one iteration of +1/-1 Gain actor."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.IfThenElse"
            overview_pic="images/ddf_IfThenElse.png"
            root_directory="models/ddf"
            title="If Then Else">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_IfThenElse.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_IfThenElse.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_IfThenElse.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demonstrates the DDF and FSM domains inside the SDF domain. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.IfThenElseFSM"

            root_directory="models/ddf"
            title="If Then Else FSM">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_IfThenElseFSM.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_IfThenElseFSM.kaom"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="Info: This model does not work."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.IfThenElseFSMKepler"
            root_directory="models/ddf"
            title="If Then Else FSM Kepler">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_IfThenElseFSMKepler.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_IfThenElseFSMKepler.kaom"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates data-dependent iteration. Input integers are repeatedly multiplied by 0.5 until the product is less than 0.5. Each iteration plots a point in outside-the-loop plotter. Configure the parameter iterations in DDF Director for desired iteration number."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.Loop"
            overview_pic="images/ddf_Loop.png"
            root_directory="models/ddf"
            title="Loop">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_Loop.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_Loop.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_Loop.kaod"
               resource_type="file">
         </resource>
      </example> 
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model, whose structure is due to Kahn and MacQueen, calculates integers whose prime factors are only 2, 3, and 5, with no redundancies. It uses the DDFOrderedMerge actor, which takes two monotonically increasing input sequences and merges them into one monotonically increasing output sequence."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.OrderedMerge"
            overview_pic="images/ddf_OrderedMerge.png"
            root_directory="models/ddf"
            title="Ordered Merge">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_OrderedMerge.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_OrderedMerge.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_OrderedMerge.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model generates a random walk with evenly spaced steps. It demonstrates a three-level nesting of domains, SDF/DDF/SDF."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.RandomWalk"
            overview_pic="images/ddf_RandomWalk.png"
            root_directory="models/ddf"
            title="Random Walk">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_RandomWalk.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_RandomWalk.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_RandomWalk.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ddf"
            contact="kieler@informatik.uni-kiel.de"
            description="A model of the rijndael encryption system, operating in ECB mode. This model makes heavy use of the class mechanism in Ptolemy II to describe components that are instantiated multiple times in the model."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ddf.RijndaelEncryption"
            overview_pic="images/ddf_RijndaelEncryption.png"
            root_directory="models/ddf"
            title="Rijndael Encryption">
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_RijndaelEncryption.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ddf/ddf_RijndaelEncryption.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ddf/ddf_RijndaelEncryption.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="ThThis demo shows how to use the NonInterruptibleTimer actor and Pulse actor to model an assembly line."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.AssemblyLine"
            overview_pic="images/de_AssemblyLine.png"
            root_directory="models/de"
            title="Assembly Line">
         <resource
               direct_open="false"
               local_path="models/de/de_AssemblyLine.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_AssemblyLine.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_AssemblyLine.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="An Alarm Clock, useful for reminding presenters that they need to finish. This example require Java 3D."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.Clock"
            overview_pic="images/de_Clock.png"
            root_directory="models/de"
            title="Clock">
         <resource
               direct_open="false"
               local_path="models/de/de_Clock.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_Clock.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_Clock.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates a famous paradox in probability called the inspection paradox. Passengers arrive randomly at a bus stop, according to a Poisson process. Busses also arrive, and waiting time of the passengers is recorded. Two situations are compared: Busses arrive at regular intervals, and busses arrive according to a Poisson process. The expected waiting time is double for the second case as the first, even though the average arrival rate of busses is the same."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.Inspection"
            overview_pic="images/de_Inspection.png"
            root_directory="models/de"
            title="Inspection">
         <resource
               direct_open="false"
               local_path="models/de/de_Inspection.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_Inspection.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_Inspection.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates that time in Ptolemy II is unbounded. This model can be run forever, beyond the point where time can be resolved as a double relative to the time precision (1E-10). In principle, it can even be run beyond the point where the double representation of time is larger than what can be represented in a double, although it would take a truly long time to prove this. Note that the time gap that is reported remains accurate regardless of how large time gets."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.LongRuns"
            overview_pic="images/de_LongRuns.png"
            root_directory="models/de"
            title="Long Runs">
         <resource
               direct_open="false"
               local_path="models/de/de_LongRuns.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_LongRuns.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_LongRuns.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="This modal model has two modes, &quot;clean&quot; and &quot;noisy&quot;. In the &quot;clean&quot; mode, it generates samples of a clean (noiseless) sinusoid at regular sample intervals. In the &quot;noisy&quot; mode, it generates a noisy sinusoid. It switches modes at random times according to a Poisson process."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.ModalModel"
            overview_pic="images/de_ModalModel.png"
            root_directory="models/de"
            title="Modal Model">
         <resource
               direct_open="false"
               local_path="models/de/de_ModalModel.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_ModalModel.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_ModalModel.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="This model produces a periodic rhythmic sound composed of three different sound clips."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.RealTimeComposite"
            overview_pic="images/de_RealTimeComposite.png"
            root_directory="models/de"
            title="Realtime Composite">
         <resource
               direct_open="false"
               local_path="models/de/de_RealTimeComposite.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_RealTimeComposite.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_RealTimeComposite.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="This model produces a rhythmic sequence of sounds from audio clips. It leverages the features of the ClipPlayer actor, which internally supports concurrent execution. Hence, there is no need for multiple threads in the DE model itself."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.SynchronizeToRealTime"
            overview_pic="images/de_SynchronizeToRealTime.png"
            root_directory="models/de"
            title="Synchronize To Realtime">
         <resource
               direct_open="false"
               local_path="models/de/de_SynchronizeToRealTime.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_SynchronizeToRealTime.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_SynchronizeToRealTime.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="This example illustrates a paradox that arises when merging two event streams of the same rate with with random delay. It plots a histogram of the time between events, which illustrates that when there is a small fixed time offset between the two periodic events, then a strongly bimodal distribution results.  When a larger fixed delay is used, then the second mode is significantly reduced. Secondly this example is illustrative of the problems faced by real-time multitasking software when interacting with physical processes periodically, but with random delays."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.TimingParadox"
            overview_pic="images/de_TimingParadox.png"
            root_directory="models/de"
            title="Timing Paradox">
         <resource
               direct_open="false"
               local_path="models/de/de_TimingParadox.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_TimingParadox.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_TimingParadox.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.de"
            contact="kieler@informatik.uni-kiel.de"
            description="This models shows that a VariableDelay actor adjusts the delay it delivers the inputs to outputs according the token fed in to the port parameter -- delay."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.de.VariableDelay"
            overview_pic="images/de_VariableDelay.png"
            root_directory="models/de"
            title="Variable Delay">
         <resource
               direct_open="false"
               local_path="models/de/de_VariableDelay.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/de/de_VariableDelay.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/de/de_VariableDelay.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.dt"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a simple, physical-level model of a communication system. This system uses 2-level PAM (pulse amplitude modulation). It has a square-root raised cosine pulse shaper, where a top-level parameter (editable from the run control panel) specifies the excess bandwidth, which is typically between 0.0 and 1.0. The model has a matched filter. The output display is known as an &quot;eye diagram&quot;."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.dt.Eye"
            overview_pic="images/dt_Eye.png"
            root_directory="models/dt"
            title="Eye">
         <resource
               direct_open="false"
               local_path="models/dt/dt_Eye.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/dt/dt_Eye.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/dt/dt_Eye.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.giotto"
            contact="kieler@informatik.uni-kiel.de"
            description="For a Giotto model that is embedded inside another Giotto model, the period parameter of the local director is meaningless. So, during the prefire method of the local Giotto director, the period is set according the frequency of the embedded Giotto model and the period of the upper level Giotto director."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.giotto.Composite"
            overview_pic="images/giotto_composite.png"
            root_directory="models/giotto"
            title="Composite">
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_composite.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_composite.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/giotto/giotto_composite.kaod"
               resource_type="file">
         </resource>
      </example>
           <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.giotto"
            contact="kieler@informatik.uni-kiel.de"
            description="This model includes two submodels, each of which has its own Giotto scheduler. The lower composite and the plotter have a frequency of 4, so they run twice as often as the source and the upper composite."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.giotto.Hierarchy"
            overview_pic="images/giotto_Hierarchy.png"
            root_directory="models/giotto"
            title="Hierarchy">
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_Hierarchy.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_Hierarchy.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/giotto/giotto_Hierarchy.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.giotto"
            contact="kieler@informatik.uni-kiel.de"
            description="Note that this model can cause some errors."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.giotto.Lego"
            overview_pic="images/giotto_lego.png"
            root_directory="models/giotto"
            title="Lego">
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_lego.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_lego.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/giotto/giotto_lego.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.giotto"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows how to combine a modal model with a giotto model to achieve mode changes."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.giotto.Multimode"
            overview_pic="images/giotto_Multimode.png"
            root_directory="models/giotto"
            title="Multimode">
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_Multimode.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_Multimode.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/giotto/giotto_Multimode.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.giotto"
            contact="kieler@informatik.uni-kiel.de"
            description="This model starts up with two ramps and uses them to produce output."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.giotto.OneMode"
            overview_pic="images/giotto_OneMode.png"
            root_directory="models/giotto"
            title="One Mode">
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_OneMode.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_OneMode.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/giotto/giotto_OneMode.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.giotto"
            contact="kieler@informatik.uni-kiel.de"
            description="Giotto Code Generator Example"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.giotto.Simple"
            overview_pic="images/giotto_Simple.png"
            root_directory="models/giotto"
            title="Simple">
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_Simple.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/giotto/giotto_Simple.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/giotto/giotto_Simple.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.gr"
            contact="kieler@informatik.uni-kiel.de"
            description="The Furuta pendulum has a motor controlling the angle of an arm, from which a free-swinging pendulum hangs. The objective is to swing the pendulum up and then balance it."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.gr.FurutaPendulum"
            overview_pic="images/gr_FurutaPendulum.png"
            root_directory="models/gr"
            title="Furuta Pendulum">
         <resource
               direct_open="false"
               local_path="models/gr/gr_FurutaPendulum.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/gr/gr_FurutaPendulum.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/gr/gr_FurutaPendulum.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.gr"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates mapping of a texture (from a PNG encoded photograph) onto a cube, and the tumbling of that cube using the axis rotator."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.gr.Helen"
            overview_pic="images/gr_Helen.png"
            root_directory="models/gr"
            title="Helen">
         <resource
               direct_open="false"
               local_path="models/gr/gr_Helen.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/gr/gr_Helen.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/gr/gr_Helen.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.gr"
            contact="kieler@informatik.uni-kiel.de"
            description="A simplified version of the game Pong using DE, Continuous, ModalModel and GR."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.gr.Pong"
            overview_pic="images/gr_Pong.png"
            root_directory="models/gr"
            title="Pong">
         <resource
               direct_open="false"
               local_path="models/gr/gr_Pong.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/gr/gr_Pong.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/gr/gr_Pong.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.gr"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a hybrid system, which mixes continuous-time modeling with finite state machines. In this example, two point masses on springs oscillate. However, they may collide, in which case, they stick together, and oscillate together. The stickiness decays, and they eventually come apart again. This is an example of a modal model, where there are two modes, &quot;together&quot; and &quot;separate&quot;. Each mode is modeled by a state in an FSM, and each state refines to a continuous-time model of the dynamics in that mode."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.gr.StickyMasses"
            overview_pic="images/gr_StickyMasses.png"
            root_directory="models/gr"
            title="Sticky Masses">
         <resource
               direct_open="false"
               local_path="models/gr/gr_StickyMasses.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/gr/gr_StickyMasses.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/gr/gr_StickyMasses.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.hdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demonstrates that HDF allows dynamic port rate changes and correctly schedules the two modal models."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.hdf.AdaptiveCoding"
            overview_pic="images/hdf_AdaptiveCoding.png"
            root_directory="models/hdf"
            title="Adaptive Coding">
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_AdaptiveCoding.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_AdaptiveCoding.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/hdf/hdf_AdaptiveCoding.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.hdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demonstrates HDF, which has static scheduling like SDF, but allows production and consumption rates to vary dynamically. In this example, the factor parameter of a DownSample actor is varied over the course of execution of the model. The HDF director calculates a new schedule each time the downsampling rate is changed. The model produces a Fibonacci sequence."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.hdf.Fibonacci"
            overview_pic="images/hdf_Fibonacci.png"
            root_directory="models/hdf"
            title="Fibonacci">
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_Fibonacci.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_Fibonacci.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/hdf/hdf_Fibonacci.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.hdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows the Hysteresis effect. Hysteresis is a retardation of an effect when the forces acting upon a body are changed. It is often used to describe the phenomenon in which the magnetic induction of a ferromagnetic material lags behind the changing magnetic field.\n\n In this example, the noisy sinewave is turned into a square wave. However, the polarity of the square wave does not change immediately when the sinewave changes polarity."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.hdf.Hysteresis"
            overview_pic="images/hdf_Hysteresis.png"
            root_directory="models/hdf"
            title="Hysteresis">
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_Hysteresis.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_Hysteresis.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/hdf/hdf_Hysteresis.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.hdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demonstrates that HDF allows consumption and production rates to vary dynamically. The port rates of the modal model is determined by the model inside the state refinement."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.hdf.Merge"
            overview_pic="images/hdf_Merge.png"
            root_directory="models/hdf"
            title="Merge">
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_Merge.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/hdf/hdf_Merge.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/hdf/hdf_Merge.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.petrinet"
            contact="kieler@informatik.uni-kiel.de"
            description="A Petri Net model of the Dining Philosophers Problem"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.petrinet.PetriNetDiningPhilosophers"
            overview_pic="images/petrinet_PetriNetDiningPhilosophers.png"
            root_directory="models/petrinet"
            title="Petri Net Dining Philosophers">
         <resource
               direct_open="false"
               local_path="models/petrinet/petrinet_PetriNetDiningPhilosophers.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/petrinet/petrinet_PetriNetDiningPhilosophers.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/petrinet/petrinet_PetriNetDiningPhilosophers.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.petrinet"
            contact="kieler@informatik.uni-kiel.de"
            description="As the model is running, the PetriNet Director sends messages to the PetriNetDisplay.\n\n The messages contain the token count for each Place at each iteration."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.petrinet.PetriNetSimple"
            overview_pic="images/petrinet_PetriNetSimple.png"
            root_directory="models/petrinet"
            title="Petri Net Simple">
         <resource
               direct_open="false"
               local_path="models/petrinet/petrinet_PetriNetSimple.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/petrinet/petrinet_PetriNetSimple.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/petrinet/petrinet_PetriNetSimple.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates the well-known Brock-Ackerman anomaly. The two composite actors ActorA and ActorB implement exactly the same (nondeterministic) input/output relation. That is, given any two input sequences at the two input ports, the possible output sequences from each actor are the same.  However, when wired as shown into two feedback loops, the two actors do not behave the same way.  In particular, the upper feedback loop has more possible outputs than the bottom one."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.BrockAckerman"
            overview_pic="images/pn_BrockAckerman.png"
            root_directory="models/pn"
            title="Brock Ackerman">
         <resource
               direct_open="false"
               local_path="models/pn/pn_BrockAckerman.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_BrockAckerman.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_BrockAckerman.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows how to implement increment/decrement by 1 and test-to-zero in dataflow. Also word-level select and switch."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.Counter-prelim"
            overview_pic="images/pn_Counter-prelim.png"
            root_directory="models/pn"
            title="Counter-prelim">
         <resource
               direct_open="false"
               local_path="models/pn/pn_Counter-prelim.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_Counter-prelim.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_Counter-prelim.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="The next step is how to represent the program that a counter machine runs. Here we consider a machine with a two counters, C1 and C2. A program for such a machine consists of a sequence of program locations, each with an associated command."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.CounterMachineHalts"
            overview_pic="images/pn_CounterMachine-halts.png"
            root_directory="models/pn"
            title="Counter Machine halts">
         <resource
               direct_open="false"
               local_path="models/pn/pn_CounterMachine-halts.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_CounterMachine-halts.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_CounterMachine-halts.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="Repeated runs of this model will yield the outputs in different orders because of the nondeterministic merge."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.MergeRamps"
            overview_pic="images/pn_MergeRamps.png"
            root_directory="models/pn"
            title="Merge Ramps">
         <resource
               direct_open="false"
               local_path="models/pn/pn_MergeRamps.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_MergeRamps.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_MergeRamps.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="This model generates events with the time between events roughly given by the two timeStep parameters, which are in units of milliseconds. It then merges the two event sequences using a NondeterministicMerge, which is a PN-specific actor that passes data from any number of input streams to the output. Notice that this actor extends PN to support nondeterministic models. It should be used with caution."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.NondeterministicMerge"
            root_directory="models/pn"
            title="Nondeterministic Merge">
         <resource
               direct_open="false"
               local_path="models/pn/pn_NondeterministicMerge.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_NondeterministicMerge.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_NondeterministicMerge.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="This model, whose structure is due to Kahn and MacQueen, calculates integers whose prime factors are only 2, 3, and 5, with no redundancies. It uses the OrderedMerge actor, which takes two monotonically increasing input sequences and merges them into one monotonically increasing output sequence."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.OrderedMerge"
            overview_pic="images/pn_OrderedMerge.png"
            root_directory="models/pn"
            title="Ordered Merge">
         <resource
               direct_open="false"
               local_path="models/pn/pn_OrderedMerge.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_OrderedMerge.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_OrderedMerge.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a Process Network (PN) that executes the QR-algorithm on a continuous stream of data, coming from an array of antennas. The processes in the network execute in parallel on the new samples of data from the antennas. The update parameter indicates how many sets of samples need to be processed."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.QR"
            overview_pic="images/pn_QR.png"
            root_directory="models/pn"
            title="QR">
         <resource
               direct_open="false"
               local_path="models/pn/pn_QR.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_QR.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_QR.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="This model tests handling nil tokens. The RemoveNilTokens actor removes tokens that have no value. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.RemoveNilTokens"
            overview_pic="images/pn_RemoveNilTokens.png"
            root_directory="models/pn"
            title="Remove Nil Tokens">
         <resource
               direct_open="false"
               local_path="models/pn/pn_RemoveNilTokens.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_RemoveNilTokens.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_RemoveNilTokens.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pn"
            contact="kieler@informatik.uni-kiel.de"
            description="his model illustrates a stack, thus demonstrating that PN is Turing complete with only boolean data types, SampleDelay, LogicFunction, BooleanSwitch, and BooleanSelect."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pn.Stack"
            overview_pic="images/pn_Stack.png"
            root_directory="models/pn"
            title="Stack">
         <resource
               direct_open="false"
               local_path="models/pn/pn_Stack.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pn/pn_Stack.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pn/pn_Stack.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.psdf"
            contact="kieler@informatik.uni-kiel.de"
            description="A model of a blind communication receiver that illustrates the use of the parameterized synchronous dataflow domain."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.psdf.BlindCommunication"
            overview_pic="images/psdf_BlindCommunication.png"
            root_directory="models/psdf"
            title="Blind Communication">
         <resource
               direct_open="false"
               local_path="models/psdf/psdf_BlindCommunication.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/psdf/psdf_BlindCommunication.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/psdf/psdf_BlindCommunication.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptera"
            contact="kieler@informatik.uni-kiel.de"
            description="This CarWash model demonstrates using Ptera (Ptolemy Event Relationship Model) and model transformation to achieve dynamic updating of the model being executed."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptera.AdaptiveCarWash"
            overview_pic="images/ptera_AdaptiveCarWash.png"
            root_directory="models/ptera"
            title="Adaptive Car Wash">
         <resource
               direct_open="false"
               local_path="models/ptera/ptera_AdaptiveCarWash.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptera/ptera_AdaptiveCarWash.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptera/ptera_AdaptiveCarWash.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptera"
            contact="kieler@informatik.uni-kiel.de"
            description="This hierarchical model demonstrates a traffic light system with DE (Discrete Event) and Ptera (Ptolemy Event Relationship Actor). The DE model simulates an execution environment, which randomly triggers errors. The traffic light switches into error mode on receiving an error event (generated by the PoissonClock), and the yellow light flashes. After 10 units of model time, the traffic light recovers and resumes its function."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptera.TrafficLight"
            overview_pic="images/ptera_TrafficLight.png"
            root_directory="models/ptera"
            title="Traffic Light">
         <resource
               direct_open="false"
               local_path="models/ptera/ptera_TrafficLight.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptera/ptera_TrafficLight.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptera/ptera_TrafficLight.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pthales"
            contact="kieler@informatik.uni-kiel.de"
            description="No description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pthales.Dynamic"
            overview_pic="images/pthales_Dynamic.png"
            root_directory="models/pthales"
            title="Dynamic">
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_Dynamic.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_Dynamic.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pthales/pthales_Dynamic.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pthales"
            contact="kieler@informatik.uni-kiel.de"
            description="???"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pthales.FFT"
            overview_pic="images/pthales_FFT.png"
            root_directory="models/pthales"
            title="FFT">
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_FFT.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_FFT.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pthales/pthales_FFT.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pthales"
            contact="kieler@informatik.uni-kiel.de"
            description="This model is a simple Pthales model using 3-D arrays."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pthales.HelloWorld"
            overview_pic="images/pthales_HelloWorld.png"
            root_directory="models/pthales"
            title="Hello World">
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_HelloWorld.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_HelloWorld.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pthales/pthales_HelloWorld.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pthales"
            contact="kieler@informatik.uni-kiel.de"
            description="Illustration for the Pthales domain."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pthales.Illustrative"
            overview_pic="images/pthales_Illustrative.png"
            root_directory="models/pthales"
            title="Illustrative">
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_Illustrative.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_Illustrative.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pthales/pthales_Illustrative.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.pthales"
            contact="kieler@informatik.uni-kiel.de"
            description="No description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.pthales.ImageDisplay"
            overview_pic="images/pthales_ImageDisplay.png"
            root_directory="models/pthales"
            title="Image Display">
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_ImageDisplay.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/pthales/pthales_ImageDisplay.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/pthales/pthales_ImageDisplay.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="No description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.2Bus"
            overview_pic="images/ptides_2Bus.png"
            root_directory="models/ptides"
            title="2Bus">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_2Bus.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_2Bus.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_2Bus.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="Overly simplistic tank model.\n\n This model cuts off the input flow when the tank is full and the output flow when the tank is empty."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.FuelSystem1"
            overview_pic="images/ptides_FuelSystem_1.png"
            root_directory="models/ptides"
            title="FuelSystem 1">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_FuelSystem_1.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_FuelSystem_1.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_FuelSystem_1.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="This Ptolemy example explores how to generate such sampling events for designs where these events are NOT produced outside of the control of the embedded microprocessor (thought to be the common case). For simplicitythis example assumes that the grid frequency is 2Hz (rather than 60) and that 5 samples per grid period (rather than 80) are required. This is done to make the plots less dense and more readable, and because the resulting sample interval is 0.1S rather than 1/(60x80) which cannot be exactly represented in binary representation with an LSB of 1ns (as in IEEE 1588). To further simplify the plots, the UTC clock actor generates a 1PPS (one pulse per second) event to model a UTC time base with an LSB of 0.01S."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PowerManagementUnitSamplingWithCurrentLocalTime"
            overview_pic="images/ptides_PowerManagementUnitSamplingWithCurrentLocalTime.png"
            root_directory="models/ptides"
            title="Power Management Unit Sampling With Current Local Time">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PowerManagementUnitSamplingWithCurrentLocalTime.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PowerManagementUnitSamplingWithCurrentLocalTime.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PowerManagementUnitSamplingWithCurrentLocalTime.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="This is a discrete event model of an avionics fuel control system. Actors in this model are highly connected. To avoid displaying all the relations between actors, this model uses the WirelessDirector. Note that the WirelessDirector is a subclass of the DEDirector. Communication is done through special network components (Bus) which are derived from the AtomicWirelessChannel. Ports have a parameter outsideChannel which specifies the Bus they are connected to. The parameter &apos;receiver&apos; in an output port specifies the target port. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesAirplaneFuelControl"
            overview_pic="images/ptides_PtidesAirplaneFuelControl.png"
            root_directory="models/ptides"
            title="Airplane Fuel Control">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesAirplaneFuelControl.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesAirplaneFuelControl.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesAirplaneFuelControl.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="A mixed simulator that combines PTIDES with DE and Continuous directors. The PTIDES model is a simple proportional controller, which provides output depending on the difference between the current actual input and desired input. The Continuous model implements a plant model. The DE director on the outside simulates the passage of physical time."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesBasicMixedSimulator"
            overview_pic="images/ptides_PtidesBasicMixedSimulator.png"
            root_directory="models/ptides"
            title="Basic Mixed Simulator">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicMixedSimulator.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicMixedSimulator.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesBasicMixedSimulator.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="Simulation of a TDMA network. There are three sources, Clock, Clock2 and Clock3. Each feeding into a Platform. The Platform is a trivial PTIDES model, which simply relays the input to its output. Since we assume a perfect world with 0 execution time, the output event of the PTIDES platform has the same timestamp as the input event. Each platform then transmits data through the network model, which models a TDMA network. The TDMA has a period of TDMAPeriod, and a transmission time of 1 is assumed for each data packet through the network."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesBasicMultiPlatformTDMA"
            overview_pic="images/ptides_PtidesBasicMultiPlatformTDMA.png"
            root_directory="models/ptides"
            title="Basic Multi Platform TDMA">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicMultiPlatformTDMA.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicMultiPlatformTDMA.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesBasicMultiPlatformTDMA.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="A &quot;Hello World&quot; Ptides program. The top level of this model shows a physical environment in which two clocks provide stimulus to a compute platform, which, after some time, responds to the stimulus with output events that are plotted. At the top level of the model, &quot;time&quot; (in the DE director) represents physical time. The time-stamp of an event from the clock actors represents the physical time t which the stimulus is presented to the compute platform. The time stamp of the response event represents the physical time of the response. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesBasicOnePlatform"
            overview_pic="images/ptides_PtidesBasicOnePlatform.png"
            root_directory="models/ptides"
            title="Basic One Platform">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicOnePlatform.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicOnePlatform.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesBasicOnePlatform.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="Top-level view of a power plant. The Supervisory Control block provides the signal to start the power plant and sets the target output levels. The Local Control block implements a simple control law to achieve the target output levels. It also detects failures to receive sensor data from the network. Upon the first such failure, it notifies the Supervisory Control block with a warning. Upon the second such failure, it locally changes the target output level to shut down the power plant, and also notifies the Supervisory Control block."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesBasicPowerPlant"
            overview_pic="images/ptides_PtidesBasicPowerPlant.png"
            root_directory="models/ptides"
            title="Basic Power Plant">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicPowerPlant.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicPowerPlant.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesBasicPowerPlant.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="No description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesBasicTTE"
            overview_pic="images/ptides_PtidesBasicTTE.png"
            root_directory="models/ptides"
            title="Basic TTE">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicTTE.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicTTE.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesBasicTTE.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="No description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesBasicTwoPlatformsNetworkSensorEvents"
            root_directory="models/ptides"
            title="Basic Two Platforms Network Sensor Events">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicTwoPlatformsNetworkSensorEvents.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesBasicTwoPlatformsNetworkSensorEvents.kaom"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="No description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesNetwork"
            overview_pic="images/ptides_PtidesNetwork.png"
            root_directory="models/ptides"
            title="Network">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesNetwork.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesNetwork.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesNetwork.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.ptides"
            contact="kieler@informatik.uni-kiel.de"
            description="No description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.ptides.PtidesPreemptEDFOnePlatformThreePathsRealDelay"
            overview_pic="images/ptides_PtidesPreemptEDFOnePlatformThreePathsRealDelay.png"
            root_directory="models/ptides"
            title="Preempt EDF One Platform Three Paths Real Delay">
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesPreemptEDFOnePlatformThreePathsRealDelay.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/ptides/ptides_PtidesPreemptEDFOnePlatformThreePathsRealDelay.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/ptides/ptides_PtidesPreemptEDFOnePlatformThreePathsRealDelay.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.rendezvous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates a design pattern with rendezvous called a &quot;barrier synchronization.&quot; In this example, the two Ramps are sending increasing sequences of integers to the Displays. However, the transfer is constrained to occur only when both the Barrier actor and the Sleep actor read inputs. Thus, a multi-way rendezvous between the two Ramp actors, the two Display actors, the Barrier actor, and the Sleep actor constrains the two transfers to the Display actors to occur simultaneously. The Sleep actor will sleep a random amount of time after reading its input, and during that time will not accept additional inputs. Thus, after the first two (why two?) transfers to the Display actors the time between transfers is controlled by the Sleep actor."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.rendezvous.Barrier"
            overview_pic="images/rendezvous_Barrier.png"
            root_directory="models/rendezvous"
            title="Barrier">
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_Barrier.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_Barrier.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/rendezvous/rendezvous_Barrier.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.rendezvous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates resource management where a pool (containing only one resource) provides that resource nondeterministically to one of two Sleep actors. The Sleep actor that gets the resource holds it for a fixed amount of time (100 and 150 ms, respectively). After this time, it releases the resource, sending it to an Expression actor, which increments the value of the resource and then returns it to the resource pool."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.rendezvous.ResourcePool"
            overview_pic="images/rendezvous_ResourcePool.png"
            root_directory="models/rendezvous"
            title="Resource Pool">
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_ResourcePool.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_ResourcePool.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/rendezvous/rendezvous_ResourcePool.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.rendezvous"
            contact="kieler@informatik.uni-kiel.de"
            description="This demo compares two distinct ways to control the sequencing of otherwise independent tasks. The upper method is complex and subtle, and uses nondeterministic mechanisms to achieve deterministic aims. The lower method is simple and direct and uses only deterministic mechanisms."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.rendezvous.Sequencing"
            overview_pic="images/rendezvous_Sequencing.png"
            root_directory="models/rendezvous"
            title="Sequencing">
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_Sequencing.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_Sequencing.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/rendezvous/rendezvous_Sequencing.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.rendezvous"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates a design pattern with rendezvous called a &quot;write regulator.&quot; In this example, the Ramp is sending an increasing sequence of integers to the Display. However, the transfer s constrained to occur only when the Sleep actor reads inputs, because in the rendezvous domain, sending data to multiple recipients via a relation is accomplished via a multi-way rendezvous."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.rendezvous.WriteRegulator"
            overview_pic="images/rendezvous_WriteRegulator.png"
            root_directory="models/rendezvous"
            title="Write Regulator">
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_WriteRegulator.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/rendezvous/rendezvous_WriteRegulator.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/rendezvous/rendezvous_WriteRegulator.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="Illustration of some simple array actors."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.Array"
            overview_pic="images/sdf_Array.png"
            root_directory="models/sdf"
            title="Array">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Array.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Array.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_Array.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model traces an elaborate curve called the butterfly curve. It was described by T. Fay, American Mathematical Monthly, 96(5), May, 1989"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.Butterfly"
            overview_pic="images/sdf_Butterfly.png"
            root_directory="models/sdf"
            title="Butterfly">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Butterfly.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Butterfly.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_Butterfly.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model repeatedly evaluates an expression, a function of two ramp signals, slow and fast."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.Expression"
            overview_pic="images/sdf_Expression.png"
            root_directory="models/sdf"
            title="Expression">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Expression.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Expression.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_Expression.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a simple, physical-level model of a communication system. This system uses 2-level PAM (pulse amplitude modulation). It has a square-root raised cosine pulse shaper, where a top-level parameter (editable from the run control panel) specifies the excess bandwidth, which is typically between 0.0 and 1.0. The model has a matched filter. The output display is known as an &quot;eye diagram.&quot;"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.Eye"
            overview_pic="images/sdf_Eye.png"
            root_directory="models/sdf"
            title="Eye">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Eye.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Eye.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_Eye.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model compares three realizations of an FIR filter. The top one has fixed-point inputs and coefficients. The middle one uses only double precision. The bottom one has quantized coefficients, but performs arithmetic using double precision."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.FixFIR"
            overview_pic="images/sdf_FixFIR.png"
            root_directory="models/sdf"
            title="Fix FIR">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_FixFIR.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_FixFIR.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_FixFIR.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model compares fixed-point (quantized) data against unquantized data."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.FixPoint"
            overview_pic="images/sdf_FixPoint.png"
            root_directory="models/sdf"
            title="Fix Point">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_FixPoint.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_FixPoint.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_FixPoint.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="Run the model.  Edit the time-domain plot x(n), and see the magnitude of its Fourier series coefficients plotted in response. To edit the plot, right click and drag."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.FourierSeries"
            root_directory="models/sdf"
            title="Fourier Series">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_FourierSeries.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_FourierSeries.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_FourierSeries.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="Simulate N bodies with gravitational forces between them. The initialPositions and initialVelocities parameters provide initial velocities and positions, and the numberOfBodies parameter specifies the number of bodies."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sd.Gravitation"
            overview_pic="images/sdf_Gravitation.png"
            root_directory="models/sdf"
            title="Gravitation">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Gravitation.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Gravitation.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_Gravitation.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a simple vector quantizer for images."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.HTVQ"
            overview_pic="images/sdf_HTVQ.png"
            root_directory="models/sdf"
            title="HTVQ">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_HTVQ.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_HTVQ.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_HTVQ.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates an LMS (least mean square) adaptive filter that learns the response of a fixed FIR (finite impulse response) filter by observing the input and noisy output of the filter."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.LMSAdaptive"
            overview_pic="images/sdf_LMSAdaptive.png"
            root_directory="models/sdf"
            title="LMS Adaptive">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_LMSAdaptive.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_LMSAdaptive.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_LMSAdaptive.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows a polynomial mapping described by the equation: x(n+1) = rx(n)(1-x(n)) which was originally introduced as a demographic model where x(n) is a number between 0 and 1, and represents the population at year n and r is a positive number, and represents a combined rate for reproduction and starvation."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.LogisticMap"
            overview_pic="images/sdf_LogisticMap.png"
            root_directory="models/sdf"
            title="Logistic Map">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_LogisticMap.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_LogisticMap.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_LogisticMap.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This example illustrates SDF modeling, which is well-suited to signal processing. In SDF, components communicate using streams, but their production and consumption rates are fixed. Because of these fixed rates, extensive static analysis of the model is possible, enabling efficient code generation and optimization."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.MaximumEntropySpectrum"
            overview_pic="images/sdf_MaximumEntropySpectrum.png"
            root_directory="models/sdf"
            title="Maximum Entropy Spectrum">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_MaximumEntropySpectrum.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_MaximumEntropySpectrum.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_MaximumEntropySpectrum.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model modifies a pre-existing Ptolemy model by changing the colors of the circles."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.ModelDisplay"
            overview_pic="images/sdf_ModelDisplay.png"
            root_directory="models/sdf"
            title="Model Display">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_ModelDisplay.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_ModelDisplay.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_ModelDisplay.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model generates a Ptolemy model consisting of 100 circles placed uniformly."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.ModelGenerator"
            overview_pic="images/sdf_ModelGenerator.png"
            root_directory="models/sdf"
            title="Model Generator">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_ModelGenerator.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_ModelGenerator.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_ModelGenerator.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates the use of a &quot;RunCompositeActor&quot; component, which can be found in the Actors library under HigherOrderActors.  That component contains another Ptolemy II model. Each time it fires, it performs a complete execution of that other Ptolemy II model, rather than just one firing as would be typical of a composite actor."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.MultipleRuns"
            overview_pic="images/sdf_MultipleRuns.png"
            root_directory="models/sdf"
            title="Multiple Runs">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_MultipleRuns.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_MultipleRuns.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_MultipleRuns.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="no description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.OriginalVoice"
            overview_pic="images/sdf_OriginalVoice.png"
            root_directory="models/sdf"
            title="Original Voice">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_OriginalVoice.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_OriginalVoice.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_OriginalVoice.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model is used as a test case for code generation.  It produces data on standard out, so nothing much happens when it is run in the standard interpreted mode."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.OrthogonalCom"
            overview_pic="images/sdf_OrthogonalCom.png"
            root_directory="models/sdf"
            title="Orthogonal Com">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_OrthogonalCom.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_OrthogonalCom.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_OrthogonalCom.kaod"
               resource_type="file">
         </resource>
      </example>
<example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="A model of the rijndael encryption system, operating in ECB mode. This model makes heavy use of the class mechanism in Ptolemy II to describe components that are instantiated multiple times in the model."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.RijndaelEncryption"
            overview_pic="images/sdf_RijndaelEncryption.png"
            root_directory="models/sdf"
            title="Rijndael Encryption">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_RijndaelEncryption.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_RijndaelEncryption.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_RijndaelEncryption.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="Run the demo and sketch a signal using the right mouse button. The signal is multiplied by a sine wave."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.Sketch"
            overview_pic="images/sdf_Sketch.png"
            root_directory="models/sdf"
            title="Sketch">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Sketch.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_Sketch.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_Sketch.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="This model captures audio from the microphone (if there is one) and displays both the time-domain signal and a simple spectral estimate (a periodogram estimate)."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.SoundSpectrum"
            overview_pic="images/sdf_SoundSpectrum.png"
            root_directory="models/sdf"
            title="Sound Spectrum">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_SoundSpectrum.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_SoundSpectrum.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_SoundSpectrum.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sdf"
            contact="kieler@informatik.uni-kiel.de"
            description="A model of a voice analysis/synthesis algorithm. The GradientAdaptiveLattice filter determines the spectral content of the input signal using an adaptive linear prediction filter. The VariableRecursiveLattice uses this information to create a synthetic version of the original signal."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sdf.SynthesizedVoice"
            overview_pic="images/sdf_SynthesizedVoice.png"
            root_directory="models/sdf"
            title="Synthesized Voice">
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_SynthesizedVoice.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sdf/sdf_SynthesizedVoice.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sdf/sdf_SynthesizedVoice.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sequence"
            contact="kieler@informatik.uni-kiel.de"
            description="In this model, each actor has a SequenceAttribute that specifies its position in the firing order."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sequence.HelloWorld"
            overview_pic="images/sequence_HelloWorld.png"
            root_directory="models/sequence"
            title="Hello World">
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_HelloWorld.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_HelloWorld.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sequence/sequence_HelloWorld.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sequence"
            contact="kieler@informatik.uni-kiel.de"
            description="Demonstration of a sequenced actor with multiple fire methods."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sequence.SequencedIntegratorMultipleInstances"
            overview_pic="images/sequence_SequencedIntegratorMultipleInstances.png"
            root_directory="models/sequence"
            title="Sequenced Integrator Multiple Instances">
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_SequencedIntegratorMultipleInstances.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_SequencedIntegratorMultipleInstances.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sequence/sequence_SequencedIntegratorMultipleInstances.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sequence"
            contact="kieler@informatik.uni-kiel.de"
            description="The SequencedVariable actor updates its output when it fires according to its sequence number. So the actor Display sees the output from the last teration since its sequence number is before the SeqeuncedVariable actor&apos;s sequence number. All SequencedVariables beginning with the same name in the orm NAME_(instanceNumber) (e.g. var_3) share the same data in a parameter stored in the model."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sequence.SequencedVariableMultipleInstances"
            overview_pic="images/sequence_SequencedVariableMultipleInstances.png"
            root_directory="models/sequence"
            title="Sequenced Variable Multiple Instances">
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_SequencedVariableMultipleInstances.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_SequencedVariableMultipleInstances.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sequence/sequence_SequencedVariableMultipleInstances.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sequence"
            contact="kieler@informatik.uni-kiel.de"
            description="In this model, each actor has a SequenceAttribute that specifies its position in the firing order."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sequence.Visual"
            overview_pic="images/sequence_Visual.png"
            root_directory="models/sequence"
            title="Visual">
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_Visual.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sequence/sequence_Visual.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sequence/sequence_Visual.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sr"
            contact="kieler@informatik.uni-kiel.de"
            description="This model demonstrates that a NonStrictDelay actor breaks a feedback loop in a SR model, even when it has no initial value."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sr.FeedbackLoop"
            overview_pic="images/sr_FeedbackLoop.png"
            root_directory="models/sr"
            title="Feedback Loop">
         <resource
               direct_open="false"
               local_path="models/sr/sr_FeedbackLoop.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sr/sr_FeedbackLoop.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sr/sr_FeedbackLoop.kaod"
               resource_type="file">
         </resource>
      </example>
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sr"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates the use of SR primitive actors to make a CountDown actor. This (composite) actor outputs a true on the ready port when it is ready to count. In the same tick of the clock, the Sequence actor provides it with a starting number. It then counts down to zero on each subsequent tick of the clock, emitting true on ready when it again reaches zero."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sr.GuardedCount"
            overview_pic="images/sr_GuardedCount.png"
            root_directory="models/sr"
            title="Guarded Count">
         <resource
               direct_open="false"
               local_path="models/sr/sr_GuardedCount.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sr/sr_GuardedCount.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sr/sr_GuardedCount.kaod"
               resource_type="file">
         </resource>
      </example>      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sr"
            contact="kieler@informatik.uni-kiel.de"
            description="no description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sr.ReflexGame"
            overview_pic="images/sr_ReflexGame.png"
            root_directory="models/sr"
            title="Reflex Game">
         <resource
               direct_open="false"
               local_path="models/sr/sr_ReflexGame.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sr/sr_ReflexGame.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sr/sr_ReflexGame.kaod"
               resource_type="file">
         </resource>
      </example>
            <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sr"
            contact="kieler@informatik.uni-kiel.de"
            description="A cyclic token-ring system composed of three blocks.  This system arbitrates fairly among requests for exclusive access to a shared resource by marching a token around a ring.  At each &quot;tick&quot; of the clock, the arbiter grants access to the first requestor downstream of the block with the token."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sr.TokenRing"
            overview_pic="images/sr_TokenRing.png"
            root_directory="models/sr"
            title="Token Ring">
         <resource
               direct_open="false"
               local_path="models/sr/sr_TokenRing.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sr/sr_TokenRing.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sr/sr_TokenRing.kaod"
               resource_type="file">
         </resource>
      </example>      
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sr"
            contact="kieler@informatik.uni-kiel.de"
            description="This model illustrates a typical design pattern where the top level is a DE model of the physical environment for a system under design. The next level down is a modal  model fashioned after the statecharts model at the right. Open the TrafficLight actor to see how it is implemented."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sr.TrafficLight"
            overview_pic="images/sr_TrafficLight.png"
            root_directory="models/sr"
            title="Traffic Light">
         <resource
               direct_open="false"
               local_path="models/sr/sr_TrafficLight.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sr/sr_TrafficLight.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sr/sr_TrafficLight.kaod"
               resource_type="file">
         </resource>
      </example>      
      <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.sr"
            contact="kieler@informatik.uni-kiel.de"
            description="This is a deployment model of the Traffic Light example where the CarLight sends signals via a radio channel to the PedestrianLight. The radio channel model has a limited range of 400 meters, so if you move the PedestrianLight more than 400 meters away from the CarLight, then communication fails to happen.  Also, in this model, the CarLight will occasionally suffer an internal failure and start blinking yellow. It will signal the pedestrian ight to start blinking red."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.sr.WirelessDeployment"
            overview_pic="images/sr_WirelessDeployment.png"
            root_directory="models/sr"
            title="Wireless Deployment">
         <resource
               direct_open="false"
               local_path="models/sr/sr_WirelessDeployment.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/sr/sr_WirelessDeployment.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/sr/sr_WirelessDeployment.kaod"
               resource_type="file">
         </resource>
      </example>      
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.taskpt"
            contact="kieler@informatik.uni-kiel.de"
            description="This example allocates some shared memory, changes sizes of the resulting pointer, modifies the content of the shared memory and displays the results on screen. Depending on the order of execution, changes in the shared memory are displayed  or not. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.taskpt.SharedMemory"
            overview_pic="images/taskpt_SharedMemory.png"
            root_directory="models/taskpt"
            title="Shared Memory">
         <resource
               direct_open="false"
               local_path="models/taskpt/taskpt_SharedMemory.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/taskpt/taskpt_SharedMemory.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/taskpt/taskpt_SharedMemory.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.taskpt"
            contact="kieler@informatik.uni-kiel.de"
            description="This example allocates some shared memory and passes the addresses to a Task. Task is executed and the value in the memory that are read and  written by the task are displayed."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.taskpt.Task"
            overview_pic="images/taskpt_Task.png"
            root_directory="models/taskpt"
            title="Task">
         <resource
               direct_open="false"
               local_path="models/taskpt/taskpt_Task.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/taskpt/taskpt_Task.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/taskpt/taskpt_Task.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.tdl"
            contact="kieler@informatik.uni-kiel.de"
            description="The model consists of the two TDL modules RearActuatorController and VehicleDynamics and a subsystem Vehicle that represents the ï¿½plantï¿½, that is, the relevant aspects of the vehicle that needs to be controlled. The TDL module RearActuatorController controls the DC motor of the rear axis. The TDL module VehicleDynamics computes the desired value of the rear steering angle, based on the following sensor data: the steering angle of the front wheels, the car speed (both of which are set by the human driver), and the yaw angle of the car."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.tdl.ActiveRearSteeringCT"
            overview_pic="images/tdl_ActiveRearSteeringCT.png"
            root_directory="models/tdl"
            title="Active Rear Steering CT">
         <resource
               direct_open="false"
               local_path="models/tdl/tdl_ActiveRearSteeringCT.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/tdl/tdl_ActiveRearSteeringCT.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/tdl/tdl_ActiveRearSteeringCT.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.tdl"
            contact="kieler@informatik.uni-kiel.de"
            description="This model consists of two TDL modules, the incDecModule and the sumModule. The incDecModule consists of two tasks, an increment task and a decrement task. There are two modes in the incDecModule. In the regular mode, both, inc and dec run with the same speed. In the fast mode, the dec task runs double as fast which is achieved by setting the frequency of the dec task inside this mode to two thus decreasing its LET. The sum module produces the sum of the signals from the inc and the dec task."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.tdl.IncrementDecrement"
            overview_pic="images/tdl_IncrementDecrement.png"
            root_directory="models/tdl"
            title="Increment Decrement">
         <resource
               direct_open="false"
               local_path="models/tdl/tdl_IncrementDecrement.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/tdl/tdl_IncrementDecrement.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/tdl/tdl_IncrementDecrement.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.tdl"
            contact="kieler@informatik.uni-kiel.de"
            description="This example shows the interaction of a TDL module with an actor that executes in logical zero time and gets output ports from the TDL module and writes to input ports of the TDL module."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.tdl.ZeroTimeDEActorLoop"
            overview_pic="images/tdl_ZeroTimeDEActorLoop.png"
            root_directory="models/tdl"
            title="Zero Time DE Actor Loop">
         <resource
               direct_open="false"
               local_path="models/tdl/tdl_ZeroTimeDEActorLoop.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/tdl/tdl_ZeroTimeDEActorLoop.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/tdl/tdl_ZeroTimeDEActorLoop.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.tm"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows two (independent) control loops whose controllers share the same CPU. The control loops are chosen such that it is unstable if the control signals are constantly delayed. By choosing different priority assignments and TM scheduling policies, different stability of the two loops may  appear. For example, a nonpreemptive scheduling can stablize both control loops, but none of the  preemptive ones can."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.tm.Controllers"
            overview_pic="images/tm_Controllers.png"
            root_directory="models/tm"
            title="Controllers">
         <resource
               direct_open="false"
               local_path="models/tm/tm_Controllers.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/tm/tm_Controllers.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/tm/tm_Controllers.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.tm"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows the use of background process for long running tasks in the TM domain. There are two composite actors in this model, both implemented in SDF. One of them, the signal generator, has a short execution time, and is treated as an atomic execution. The other, implementing the FFT algorithm, has a long execution time, and is xecuted in a separate thread."
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.tm.FFT"
            overview_pic="images/tm_FFT.png"
            root_directory="models/tm"
            title="FFT">
         <resource
               direct_open="false"
               local_path="models/tm/tm_FFT.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/tm/tm_FFT.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/tm/tm_FFT.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.tm"
            contact="kieler@informatik.uni-kiel.de"
            description="no description"
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.tm.MergedEvents"
            overview_pic="images/tm_MergedEvents.png"
            root_directory="models/tm"
            title="Merged Events">
         <resource
               direct_open="false"
               local_path="models/tm/tm_MergedEvents.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/tm/tm_MergedEvents.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/tm/tm_MergedEvents.kaod"
               resource_type="file">
         </resource>
      </example>
	  <example
            author="KIELER Workgroup"
            category="de.cau.cs.kieler.kaom.ptolemy.tm"
            contact="kieler@informatik.uni-kiel.de"
            description="This model shows two independent tasks on a single CPU machine. The TM scheduler preemptive parameter determines the scheduling policy. The schedule will be different depending on whether preemptive is true or false. To run the demo, start the run window and set the  preemptive parameter to true or false. "
            generation_date="Mon Mar 14 13:46 CEST 2011"
            id="de.cau.cs.kieler.kaom.ptolemy.tm.SimpleTasks"
            overview_pic="images/tm_SimpleTasks.png"
            root_directory="models/tm"
            title="Simple Tasks">
         <resource
               direct_open="false"
               local_path="models/tm/tm_SimpleTasks.xml"
               resource_type="file">
         </resource>
         <resource
               direct_open="false"
               local_path="models/tm/tm_SimpleTasks.kaom"
               resource_type="file">
         </resource>
         <resource
               direct_open="true"
               local_path="models/tm/tm_SimpleTasks.kaod"
               resource_type="file">
         </resource>
      </example>
   </extension>
</plugin>
