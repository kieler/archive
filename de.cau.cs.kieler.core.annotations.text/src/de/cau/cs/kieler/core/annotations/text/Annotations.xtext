/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2012 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
grammar de.cau.cs.kieler.core.annotations.text.Annotations with org.eclipse.xtext.common.Terminals

import "http://kieler.cs.cau.de/annotations"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// --------------------------
//
//   ANNOTATIONS
//
// --------------------------


Annotation returns Annotation:
    CommentAnnotation
    | TagAnnotation
    | KeyStringValueAnnotation
    | TypedKeyStringValueAnnotation
    | KeyBooleanValueAnnotation
    | KeyIntValueAnnotation
    | KeyFloatValueAnnotation
    ;

ValuedAnnotation returns Annotation:
    CommentAnnotation
    | KeyStringValueAnnotation
    | TypedKeyStringValueAnnotation
    | KeyBooleanValueAnnotation
    | KeyIntValueAnnotation
    | KeyFloatValueAnnotation
    ;


// e.g.: /** semantic comment */
CommentAnnotation returns StringAnnotation:
    value=COMMENT_ANNOTATION;


// e.g.: @HVlayout
TagAnnotation returns Annotation:
    '@' name=ExtendedID
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @layouter dot;   
KeyStringValueAnnotation returns StringAnnotation:
    '@' name=ExtendedID value=EString
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
TypedKeyStringValueAnnotation returns TypedStringAnnotation:
    '@' name=ExtendedID '[' type=ExtendedID ']' value=EString
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @visible true;
KeyBooleanValueAnnotation returns BooleanAnnotation:
    '@' name=ExtendedID value=BOOLEAN
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @minSpace 10;    
KeyIntValueAnnotation returns IntAnnotation:
    '@' name=ExtendedID value=INT
    ('('
        (annotations+=Annotation)*
    ')')?;


// e.g.: @minSpace 10.0;    
KeyFloatValueAnnotation returns FloatAnnotation:
    '@' name=ExtendedID value=FLOAT
    ('('
        (annotations+=Annotation)*
    ')')?;


// needed for importing other resources
ImportAnnotation returns ImportAnnotation:
    'import' importURI=STRING;


// allow strings without quotes as they don'c contain spaces
EString returns ecore::EString:
    STRING | ID;


ExtendedID returns ecore::EString:
  ID ("."ID)*;
  
  
// --------------------------
//
//  Terminals...
//
// --------------------------


// custom terminals
   
// custom terminal rule introducing semantic comments
terminal COMMENT_ANNOTATION returns ecore::EString: 
    '/**' -> '*/';


// modified version of Terminals.ML_COMMENT as
// COMMENT_ANNOTATION is not recognized correctly with original one 
terminal ML_COMMENT returns ecore::EString:
    '/*'!'*' -> '*/';


// generic terminals

terminal fragment NUMBER :
    '0'..'9';
   
// redefine INT terminal to allow negative numbers
terminal INT returns ecore::EInt:
    '-'? NUMBER+;

// make sure the Float rule does not shadow the INT rule
terminal FLOAT returns ecore::EFloatObject :
    '-'? NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
    '-'? NUMBER+ 'f';
    
// introduce boolean values
terminal BOOLEAN returns ecore::EBooleanObject :
    'true' | 'false';

// custom terminal rule for strings
terminal STRING returns ecore::EString:
    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
